 # Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class
__pycache__
# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/ 


# vl:

# Archivos de sistema
.DS_Store
Thumbs.db

# Python
__pycache__/
*.pyc
*.pyo
*.pyd
*.ipynb_checkpoints/

# Entornos virtuales
env/
venv/
.venv/

# Notebooks temporales
*.nbconvert.ipynb
.ipynb_checkpoints/

# VS Code
.vscode/

# Archivos de configuraci√≥n sensibles
.env
*.env

# Evitamos que Render instale librerias inecesarias. 
# Agregando esta linea aca, Git dejar√° de trackear requirements-dev.txt y Render no lo ver√°.
requirements-dev.txt



# Archivos grandes o sensibles
*.csv
*.xlsx
*.zip
*.bak
*.pkl
*.db
*.log
*.tmp


# Esto le dice a Git:
#   Ignor√° todos los .csv en general
#   ¬°Pero no ignores los que est√°n en data/processed/!



!data/processed/*.csv       # Ignora todos los .csv, excepto los de data/processed

!requirements.txt

# Archivos personales / privados que no quiero publicar
docs/Pry_MBA/

# Carpetas privadas por secci√≥n
# estructura clara para guardar archivos privados, personales o de referencia dentro de cada secci√≥n es clave para:
# üîê No exponer archivos que no quer√©s hacer p√∫blicos
# üìÇ Mantener orden entre material ‚Äúpara publicar‚Äù y material ‚Äúde trabajo‚Äù
# ‚úÖ Ignorar autom√°ticamente esas carpetas con .gitignore
# docs/
# ‚îú‚îÄ‚îÄ market-basket-analysis.md           ‚Üê visible en el portfolio
# ‚îú‚îÄ‚îÄ powerbi-reports.md                 ‚Üê visible en el portfolio
# ‚îú‚îÄ‚îÄ contacto.md                        ‚Üê visible en el portfolio
# ‚îú‚îÄ‚îÄ _private/                          ‚Üê ‚õî materiales personales
# ‚îÇ   ‚îú‚îÄ‚îÄ notas internas/
# ‚îÇ   ‚îú‚îÄ‚îÄ versiones anteriores/
# ‚îÇ   ‚îî‚îÄ‚îÄ drafts/

# üìå Propuesta de convenci√≥n
# Usar un prefijo como _ en el nombre de la carpeta:
# docs/_private/
# assets/_protegido/
# sections/_borradores/
# üîê Y luego ignorarlas con una regla global en .gitignore:
# Carpeta de trabajo no publicada
# docs/_private/
# assets/_protegido/
# ‚úÖ Ventajas
# Beneficio	¬øPor qu√© ayuda?
# Evit√°s subir sin querer	Git las ignora autom√°ticamente
# Sab√©s qu√© es p√∫blico	Lo que no est√° en una carpeta _ es publicable
# Orden y limpieza	Separ√°s entregables de notas o pruebas


docs/pry_market-basket-analysis/_private/
docs/pry_powerbi-reports/_private/
docs/pry_contacto/_private/
docs/_private/